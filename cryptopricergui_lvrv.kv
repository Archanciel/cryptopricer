# ---------- cryptopricergui.kv  ----------

#: import main cryptopricergui_lvrv
#: import ListAdapter kivy.adapters.listadapter.ListAdapter
#: import ListItemButton kivy.uix.listview.ListItemButton
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import CheckBox kivy.uix.checkbox.CheckBox


CryptoPricerGUI_LVRV: #root

<CryptoPricerGUI_LVRV>:
    orientation: "vertical"
    #optimizing app size for your smartphone with Messagease keyboard
    size_hint: 1, .56
    pos_hint: {'x' : 0, 'y' : .44}
    requestInput: request_TextInput
    requestList: request_ListView
    requestListRV: request_RecycleView_list
    resultOutput: ro_output_TextInput
    toggleHistoButton: toggle_history_list_Button
    deleteButton: delete_Button
    replaceButton: replace_Button
    replayAllButton: replay_all_Button
    statusBar: status_bar
    clearResultOutputButton: clear_output_Button
    toggleAppSizeButton: toggle_app_size_Button
    requestListRVSelBoxLayout: selectable_recyclebox_layout
    boxLayoutContainingRV: boxlayout_recycleview

    padding: 5
    spacing: 5
    canvas.before:
        Color:
            rgb: [0.22,0.22,0.22]
        Rectangle:
            pos: self.pos
            size: self.size
                      
    BoxLayout:
        size_hint_y: None
        height: "28dp"
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

        GridLayout:
            cols: 2
            TextInput:
                id: request_TextInput
                background_color: 0,0,0,0
                foreground_color: 1,1,1,1
                focus: True
                multiline: False
                #ENTER triggers root.submitRequest()
                on_text_validate: root.submitRequest()
            Button:
                id: toggle_app_size_Button
                text: 'Full'
                size_hint_x: None
                width: 130
                on_press: root.toggleAppPosAndSize()

    BoxLayout:
        size_hint_y: None
        height: "28dp"
        ToggleButton:
            id: toggle_history_list_Button
            text: "History"
            size_hint_x: 15
            disabled:True
            on_press: root.toggleRequestList()
        Button:
            id: delete_Button
            text: "Delete"
            size_hint_x: 15
            disabled: True
            on_press: root.deleteRequest()
        Button:
            id: replace_Button
            text: "Replace"
            size_hint_x: 15
            disabled: True
            on_press: root.replaceRequest()
        Button:
            id: replay_all_Button
            text: "Replay All"
            size_hint_x: 15
            disabled: True
            on_press: root.replayAllRequests()
        Button:
            id: menu_Button
            text: "..."
            size_hint_x: 13
            on_release: root.openDropDownMenu(self)


    # Define starting data and point to the ListItemButton
    # in the Python code
    ListView:
        id: request_ListView
        adapter: ListAdapter(data=[], cls=main.RequestListButton, args_converter=lambda row_index,rec: {'text':rec, 'on_press':root.historyItemSelected,'size_hint_y': None,'height': root.histoListItemHeight})
        height: '0dp'
        size_hint_y: None
        on_parent: self.container.parent.effect_cls = ScrollEffect #prevents overscrolling
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

    BoxLayout:
        id: boxlayout_recycleview
        size_hint_y: None
        height: "0dp"
        RecycleView:
            id: request_RecycleView_list
            size_hint_y: 1

            viewclass: 'SelectableLabel'

            SelectableRecycleBoxLayout:
                id: selectable_recyclebox_layout
                default_size: None, dp(15) # height of list line
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                multiselect: False
                touch_multiselect: False

    ScrollView:
        id: scrlv_out
        size_hint: (1, 6)
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size
        effect_cls: ScrollEffect #prevents overscrolling
        TextInput:
            id: ro_output_TextInput
            size_hint: (1, None)
            height: max(self.minimum_height, scrlv_out.height) #required to enable scrolling when output starts to grow
            readonly: True
            background_color: 0,0,0,0
            foreground_color: 1,1,1,1

    BoxLayout:
        size_hint_y: None
        height: "28dp"
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

        GridLayout:
            cols: 2
            ScrollView:
                id: scrlv_status_bar
                size_hint: (1, 1)
                canvas.before:
                    Color:
                        rgb: [0,0,0]
                    Rectangle:
                        pos: self.pos
                        size: self.size
                effect_cls: ScrollEffect #prevents overscrolling
                TextInput:
                    id: status_bar
                    background_color: 0,0,0,0
                    foreground_color: 1,1,1,1
                    height: max(self.minimum_height, scrlv_status_bar.height) #required to enable scrolling when scroll bar msg takes more than 1 line !
                    readonly: True
                    multiline: True #must be true so long status bar msg can be scrolled on smartphone !
            Button:
                id: clear_output_Button
                text: 'Clear'
                size_hint_x: None
                width: 130
                disabled: True
                on_press: root.clearOutput()

<SelectableLabel>:
    # Draw a background to indicate selection
    canvas.before:
        Color:
            rgba: (1, 0, 0, 1) if self.selected else (.0, 0.9, .1, .3)
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: (0, 0.9, .1, .3)
        Rectangle:
            pos: self.pos
            size: self.size

<CustomDropDown>
    saveButton: save_Button
    Button:
        text: 'Load'
        size_hint_y: None
        height: '28dp'
        on_release: root.showLoad()
    Button:
        id: save_Button
        text: 'Save'
        size_hint_y: None
        height: '28dp'
        disabled: True
        on_release: root.showSave()
    Button:
        text: "Settings"
        size_hint_y: None
        height: '28dp'
        on_press: app.open_settings()
    Button:
        text: 'Help'
        size_hint_y: None
        height: '28dp'
        on_release: root.help()

<LoadDialog>:
    fileChooser: filechooser
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            dirselect: True
            on_selection: text_path_load.text = self.selection and self.selection[0] or ''

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            TextInput:
                id: text_path_load
                multiline: False
                readonly: True

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)


<SaveDialog>:
    fileChooser: filechooser
    loadAtStartChkb: load_at_start
    filePathName: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            dirselect: True
            #on_selection: text_input.text = self.selection and self.selection[0] or ''
            on_selection: root.saveFileSelected(self.selection and self.selection[0] or '')

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            TextInput:
                id: text_input
                multiline: False
            
            CheckBox:
                id: load_at_start
                size_hint_max_x: 60
                size_hint_y: None
                on_press: root.toggleLoadAtStart(self.active)
               
        BoxLayout:
            size_hint_y: None
            height: '28dp'
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text, load_at_start.active)
