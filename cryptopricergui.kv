# ---------- cryptopricergui.kv  ----------

# Reference cryptopricergui.py
#: import main cryptopricergui
#: import ListAdapter kivy.adapters.listadapter.ListAdapter
#: import ListItemButton kivy.uix.listview.ListItemButton
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import CheckBox kivy.uix.checkbox.CheckBox


CryptoPricerGUI:

<CryptoPricerGUI>:
    orientation: "vertical"
    commandInput: command
    commandList: commandListView
    resultOutput: readOnlyLog
    toggleHistoButton: toggleHistoryBtn
    deleteButton: deleteBtn
    replaceButton: replaceBtn
    replayAllButton: replayAllBtn
    statusBar: status_bar
    #outputResultScrollView: scrlv
    
    padding: 10
    spacing: 10
    canvas.before:
        Color:
            rgb: [0.22,0.22,0.22]
        Rectangle:
            pos: self.pos
            size: self.size
                      
    BoxLayout:
        size_hint_y: None
        height: "28dp"
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

        TextInput:
            id: command
            background_color: 0,0,0,0
            foreground_color: 1,1,1,1
            focus: True
            multiline: False
            #ENTER triggers root.submitCommand()
            on_text_validate: root.submitCommand()

    BoxLayout:
        size_hint_y: None
        height: "28dp"
        ToggleButton:
            id: toggleHistoryBtn
            text: "History"
            size_hint_x: 15
            disabled:True
            on_press: root.toggleCommandList()
        Button:
            id: deleteBtn
            text: "Delete"
            size_hint_x: 15
            disabled: True
            on_press: root.deleteCommand()
        Button:
            id: replaceBtn
            text: "Replace"
            size_hint_x: 15
            disabled: True
            on_press: root.replaceCommand()
        Button:
            id: replayAllBtn
            text: "Replay All"
            size_hint_x: 15
            disabled: True
            on_press: root.replayAllCommands()
        Button:
            id: menuBtn
            text: "..."
            size_hint_x: 8
            on_release: root.openDropDownMenu(self)


    # Define starting data and point to the ListItemButton
    # in the Python code
    ListView:
        id: commandListView
        adapter: ListAdapter(data=[], cls=main.CommandListButton, args_converter=lambda row_index,rec: {'text':rec, 'on_press':root.historyItemSelected,'size_hint_y': None,'height': 90})
        height: '0dp'
        size_hint_y: None
        on_parent: self.container.parent.effect_cls = ScrollEffect #prevents overscrolling
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

    ScrollView:
        id: scrlv
        size_hint: (1, 1)
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size
        effect_cls: ScrollEffect #prevents overscrolling
        TextInput:
            id: readOnlyLog
            size_hint: (1, None)
            height: max(self.minimum_height, scrlv.height) #required to enable scrolling when list starts to grow
            readonly: True
            background_color: 0,0,0,0
            foreground_color: 1,1,1,1

    BoxLayout:
        size_hint_y: None
        height: "28dp"
        canvas.before:
            Color:
                rgb: [0,0,0]
            Rectangle:
                pos: self.pos
                size: self.size

        TextInput:
            id: status_bar
            background_color: 0,0,0,0
            foreground_color: 1,1,1,1
            readonly: True
            multiline: False

<CustomDropDown>
    saveButton: save_btn
    Button:
        text: 'Load'
        size_hint_y: None
        height: '28dp'
        on_release: root.showLoad()
    Button:
        id: save_btn
        text: 'Save'
        size_hint_y: None
        height: '28dp'
        disabled: True
        on_release: root.showSave()
    Button:
        text: 'Help'
        size_hint_y: None
        height: '28dp'
        on_release: root.help()

<LoadDialog>:
    fileChooser: filechooser
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            dirselect: True
            on_selection: text_path_load.text = self.selection and self.selection[0] or ''

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            TextInput:
                id: text_path_load
                multiline: False
                readonly: True

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)


<SaveDialog>:
    fileChooser: filechooser
    loadAtStartChkb: load_at_start
    filePathName: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            dirselect: True
            #on_selection: text_input.text = self.selection and self.selection[0] or ''
            on_selection: root.saveFileSelected(self.selection and self.selection[0] or '')

        BoxLayout:
            size_hint_y: None
            height: '28dp'
            TextInput:
                id: text_input
                multiline: False
            
            CheckBox:
                id: load_at_start
                size_hint_max_x: 60
                size_hint_y: None
                on_press: root.toggleLoadAtStart(self.active)
               
        BoxLayout:
            size_hint_y: None
            height: '28dp'
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text, load_at_start.active)
